service:
  name: line-qiita-bot
custom:
  defaultStage: dev
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-offline:
    httpPort: 8083
  schedule:
    saveQiitaInfo:
      dev:
      production: cron(0 15 * * ? *) # 毎日0時
    pushDailyLikeCount:
      dev:
      production: cron(0 23 * * ? *) # 毎日8時
    pushWeeklyLikeCount:
      dev:
      production: cron(0 23 ? * SAT *) # 日曜8時
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin
provider:
  name: aws
  runtime: nodejs12.x
  region: ap-northeast-1
  profile: aa
  stage: ${opt:stage, self:custom.defaultStage}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TZ: Asia/Tokyo
    LAMBDA_NAME: ${self:service.name}-${self:provider.stage}
    DYNAMODB_TABLE: ${self:service.name}-${self:provider.stage}
    USER_TABLE: ${self:provider.environment.DYNAMODB_TABLE}-User
    QIITA_HISTORY_TABLE: ${self:provider.environment.DYNAMODB_TABLE}-QiitaHistory
    CHANNEL_ACCESS_TOKEN: ${env:CHANNEL_ACCESS_TOKEN}
    QIITA_ACCESS_TOKEN: ${env:QIITA_ACCESS_TOKEN}
    GET_CAPTURE_FUNCTION: ${self:service.name}-${self:provider.stage}-getCapture
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}*
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: arn:aws:lambda:${self:provider.region}:*:function:${self:provider.environment.LAMBDA_NAME}*
functions:
  addUser:
    handler: handler.addUser
    events:
      - http:
          method: post
          path: users
          cors: true
  getUser:
    handler: handler.getUser
    events:
      - http:
          method: get
          path: users
          cors: true
          request:
            parameters:
              querystrings:
                lineId: true
  saveQiitaInfo:
    handler: handler.saveQiitaInfo
    events:
      - schedule: ${self:custom.schedule.saveQiitaInfo.${self:provider.stage}}
  pushDailyLikeCount:
    handler: handler.pushDailyLikeCount
    events:
      - schedule: ${self:custom.schedule.pushDailyLikeCount.${self:provider.stage}}
  pushWeeklyLikeCount:
    handler: handler.pushWeeklyLikeCount
    events:
      - schedule: ${self:custom.schedule.pushWeeklyLikeCount.${self:provider.stage}}
  getCapture:
    handler: handler.getCapture
resources:
  Resources:
    User:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: lineId
            AttributeType: S
        KeySchema:
          - AttributeName: lineId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    QiitaHistory:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.QIITA_HISTORY_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
